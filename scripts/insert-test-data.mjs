/**
 * Test Data Insertion Script (ESM version)
 * Inserts 200 patients and comprehensive appointment test data
 */

import { createClient } from '@supabase/supabase-js'
import crypto from 'crypto'

// You'll need to set these environment variables or replace with actual values
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL
const supabaseAnonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY

if (!supabaseUrl || !supabaseAnonKey) {
  console.error('‚ùå Missing Supabase configuration. Please check your environment variables.')
  process.exit(1)
}

const supabase = createClient(supabaseUrl, supabaseAnonKey)

// Test data generators
const firstNames = [
  'Aarav', 'Aanya', 'Advik', 'Ahaan', 'Aisha', 'Anaya', 'Arjun', 'Avni', 'Dev', 'Diya',
  'Dhruv', 'Ishaan', 'Kiara', 'Krishna', 'Meera', 'Nisha', 'Priya', 'Raj', 'Ravi', 'Sana',
  'Shreya', 'Tanvi', 'Varun', 'Vidya', 'Yash', 'Zara', 'Amit', 'Anjali', 'Deepak', 'Geeta',
  'Harsh', 'Isha', 'Jatin', 'Kavya', 'Lalit', 'Maya', 'Nitin', 'Pooja', 'Rohit', 'Sunita',
  'Vikram', 'Anita', 'Bhavesh', 'Chetna', 'Dinesh', 'Ekta', 'Farhan', 'Garima', 'Hemant', 'Ira',
  'Karan', 'Lata', 'Manish', 'Neha', 'Omkar', 'Pallavi', 'Qadir', 'Radha', 'Suresh', 'Tara'
]

const lastNames = [
  'Sharma', 'Verma', 'Gupta', 'Agarwal', 'Singh', 'Kumar', 'Jain', 'Patel', 'Shah', 'Mehta',
  'Chopra', 'Malhotra', 'Arora', 'Kapoor', 'Bansal', 'Mittal', 'Goel', 'Saxena', 'Joshi', 'Tyagi',
  'Bhatia', 'Khanna', 'Tiwari', 'Mishra', 'Pandey', 'Rao', 'Reddy', 'Nair', 'Menon', 'Iyer',
  'Subramanian', 'Krishnan', 'Naidu', 'Prasad', 'Chandra', 'Varma', 'Das', 'Sen', 'Ghosh', 'Roy',
  'Mukherjee', 'Banerjee', 'Dutta', 'Saha', 'Kar', 'Bhowmik', 'Chakraborty', 'Dey', 'Sinha', 'Mitra'
]

const departments = [
  'Cardiology', 'Dermatology', 'Endocrinology', 'Gastroenterology', 'General Medicine',
  'Neurology', 'Orthopedics', 'Pediatrics', 'Psychiatry', 'Pulmonology'
]

const appointmentTypes = ['consultation', 'follow_up', 'procedure', 'checkup', 'emergency', 'vaccination']
const appointmentStatuses = ['scheduled', 'confirmed', 'arrived', 'in_progress', 'completed', 'cancelled', 'no_show', 'rescheduled']

const cities = ['Mumbai', 'Delhi', 'Bangalore', 'Chennai', 'Kolkata', 'Hyderabad', 'Pune', 'Ahmedabad', 'Jaipur', 'Lucknow']

function generateRandomPhone() {
  return `+91${Math.floor(Math.random() * 9000000000) + 1000000000}`
}

function generateRandomEmail(firstName, lastName) {
  const domains = ['gmail.com', 'yahoo.com', 'hotmail.com', 'outlook.com', 'email.com']
  const domain = domains[Math.floor(Math.random() * domains.length)]
  return `${firstName.toLowerCase()}.${lastName.toLowerCase()}${Math.floor(Math.random() * 100)}@${domain}`
}

function generateRandomDate(startDate, endDate) {
  return new Date(startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime()))
}

function generateRandomTime() {
  const timeSlots = [
    '08:00', '08:30', '09:00', '09:30', '10:00', '10:30', '11:00', '11:30', 
    '12:00', '12:30', '13:00', '13:30', '14:00', '14:30', '15:00', '15:30', 
    '16:00', '16:30', '17:00', '17:30', '18:00', '18:30'
  ]
  return getRandomElement(timeSlots)
}

function getRandomElement(array) {
  return array[Math.floor(Math.random() * array.length)]
}

async function insertPatients() {
  console.log('üè• Generating 200 patients...')
  const patients = []
  
  for (let i = 0; i < 200; i++) {
    const firstName = getRandomElement(firstNames)
    const lastName = getRandomElement(lastNames)
    const fullName = `${firstName} ${lastName}`
    
    // Generate age between 1 and 90
    const age = Math.floor(Math.random() * 89) + 1
    const birthYear = new Date().getFullYear() - age
    const birthMonth = Math.floor(Math.random() * 12) + 1
    const birthDay = Math.floor(Math.random() * 28) + 1
    const dateOfBirth = `${birthYear}-${birthMonth.toString().padStart(2, '0')}-${birthDay.toString().padStart(2, '0')}`
    
    const patient = {
      full_name: fullName,
      phone: generateRandomPhone(),
      email: generateRandomEmail(firstName, lastName),
      date_of_birth: dateOfBirth,
      gender: getRandomElement(['male', 'female', 'other']),
      address: `${Math.floor(Math.random() * 999) + 1}, ${getRandomElement(['MG Road', 'Park Street', 'Main Road', 'Station Road', 'Mall Road'])}, ${getRandomElement(cities)}`,
      emergency_contact_phone: generateRandomPhone(),
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    }
    
    patients.push(patient)
  }
  
  try {
    // Insert in batches to avoid timeout
    const batchSize = 25
    const patientIds = []
    
    for (let i = 0; i < patients.length; i += batchSize) {
      const batch = patients.slice(i, i + batchSize)
      const { data, error } = await supabase
        .from('patients')
        .insert(batch)
        .select('id')
      
      if (error) throw error
      
      patientIds.push(...data.map(p => p.id))
      console.log(`‚úÖ Inserted patient batch ${Math.ceil((i + batchSize) / batchSize)} - Total: ${patientIds.length} patients`)
    }
    
    return patientIds
  } catch (error) {
    console.error('‚ùå Error inserting patients:', error)
    throw error
  }
}

async function getDoctors() {
  console.log('üë®‚Äç‚öïÔ∏è Fetching doctors...')
  try {
    const { data, error } = await supabase
      .from('users')
      .select('id, full_name, department')
      .eq('role', 'doctor')
      .eq('is_active', true)
    
    if (error) throw error
    
    console.log(`‚úÖ Found ${data.length} doctors`)
    return data
  } catch (error) {
    console.error('‚ùå Error fetching doctors:', error)
    throw error
  }
}

async function insertAppointments(patientIds, doctors) {
  console.log('üìÖ Generating appointments...')
  const appointments = []
  
  // Generate appointments for the next 30 days and past 7 days
  const today = new Date()
  const futureDate = new Date()
  futureDate.setDate(today.getDate() + 30)
  const pastDate = new Date()
  pastDate.setDate(today.getDate() - 7)
  
  // Generate many appointments for today to test calendar display
  console.log('üìÖ Creating appointments for today to test calendar...')
  for (let i = 0; i < 20; i++) {
    const appointment = createAppointment(
      getRandomElement(patientIds),
      getRandomElement(doctors),
      today,
      false // not historical
    )
    appointments.push(appointment)
  }
  
  // Generate appointments across different dates
  for (let i = 0; i < 300; i++) {
    const isHistorical = Math.random() < 0.3
    const appointmentDate = isHistorical 
      ? generateRandomDate(pastDate, today)
      : generateRandomDate(today, futureDate)
    
    const appointment = createAppointment(
      getRandomElement(patientIds),
      getRandomElement(doctors),
      appointmentDate,
      isHistorical
    )
    appointments.push(appointment)
  }
  
  try {
    // Insert in batches
    const batchSize = 30
    let insertedCount = 0
    
    for (let i = 0; i < appointments.length; i += batchSize) {
      const batch = appointments.slice(i, i + batchSize)
      const { data, error } = await supabase
        .from('appointments')
        .insert(batch)
      
      if (error) {
        console.error('Batch error:', error)
        continue // Skip failed batch and continue
      }
      
      insertedCount += batch.length
      console.log(`‚úÖ Inserted appointment batch ${Math.ceil((i + batchSize) / batchSize)} - Total: ${insertedCount} appointments`)
    }
    
    console.log(`‚úÖ Successfully inserted ${insertedCount} appointments`)
    return insertedCount
  } catch (error) {
    console.error('‚ùå Error inserting appointments:', error)
    throw error
  }
}

function createAppointment(patientId, doctor, appointmentDate, isHistorical) {
  const appointmentType = getRandomElement(appointmentTypes)
  
  // Status logic based on date and type
  let status
  if (isHistorical) {
    status = getRandomElement(['completed', 'cancelled', 'no_show'])
  } else {
    const futureStatuses = ['scheduled', 'confirmed']
    status = getRandomElement(futureStatuses)
  }
  
  // Emergency appointments should be confirmed/scheduled
  if (appointmentType === 'emergency') {
    status = isHistorical ? 'completed' : 'confirmed'
  }
  
  // Some appointments for today should be in progress or arrived
  const isToday = appointmentDate.toDateString() === new Date().toDateString()
  if (isToday && Math.random() < 0.4) {
    status = getRandomElement(['arrived', 'in_progress', 'scheduled', 'confirmed'])
  }
  
  const appointment = {
    patient_id: patientId,
    doctor_id: doctor.id,
    department: doctor.department || getRandomElement(departments),
    appointment_type: appointmentType,
    status: status,
    scheduled_date: appointmentDate.toISOString().split('T')[0],
    scheduled_time: generateRandomTime(),
    duration: appointmentType === 'procedure' ? 60 : (appointmentType === 'consultation' ? 30 : 20),
    title: `${appointmentType.charAt(0).toUpperCase() + appointmentType.slice(1)} with Dr. ${doctor.full_name}`,
    priority: Math.random() < 0.15, // 15% high priority
    is_recurring: Math.random() < 0.08, // 8% recurring
    reminder_sent: isHistorical ? Math.random() < 0.8 : Math.random() < 0.3,
    confirmation_sent: status === 'confirmed' || status === 'scheduled',
    created_by: doctor.id,
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString()
  }
  
  // Add completion timestamps for completed appointments
  if (status === 'completed') {
    appointment.confirmed_at = new Date(appointmentDate.getTime() - 24 * 60 * 60 * 1000).toISOString()
    appointment.arrived_at = appointmentDate.toISOString()
    appointment.started_at = new Date(appointmentDate.getTime() + 5 * 60 * 1000).toISOString()
    appointment.completed_at = new Date(appointmentDate.getTime() + appointment.duration * 60 * 1000).toISOString()
  }
  
  // Add cancellation details for cancelled appointments
  if (status === 'cancelled') {
    appointment.cancelled_at = new Date().toISOString()
    appointment.cancellation_reason = getRandomElement(['Patient request', 'Doctor unavailable', 'Emergency', 'Rescheduled'])
  }
  
  return appointment
}

async function generateTestStatistics(patientIds, appointmentCount) {
  console.log('üìä Generating test statistics...')
  
  // Today's appointments
  const today = new Date().toISOString().split('T')[0]
  const { data: todayAppointments } = await supabase
    .from('appointments')
    .select('id, status, appointment_type')
    .eq('scheduled_date', today)
  
  // Appointment type breakdown
  const typeBreakdown = appointmentTypes.reduce((acc, type) => {
    acc[type] = todayAppointments?.filter(apt => apt.appointment_type === type).length || 0
    return acc
  }, {})
  
  // Status breakdown
  const statusBreakdown = appointmentStatuses.reduce((acc, status) => {
    acc[status] = todayAppointments?.filter(apt => apt.status === status).length || 0
    return acc
  }, {})
  
  console.log('\nüìã TEST DATA SUMMARY:')
  console.log('===================')
  console.log(`üë• Patients: ${patientIds.length}`)
  console.log(`üìÖ Total Appointments: ${appointmentCount}`)
  console.log(`üóìÔ∏è Today's Appointments: ${todayAppointments?.length || 0}`)
  console.log('\nüìä Today\'s Appointment Types:')
  Object.entries(typeBreakdown).forEach(([type, count]) => {
    console.log(`   ${type}: ${count}`)
  })
  console.log('\nüîÑ Today\'s Appointment Statuses:')
  Object.entries(statusBreakdown).forEach(([status, count]) => {
    console.log(`   ${status}: ${count}`)
  })
  
  console.log('\n‚ú® Test scenarios included:')
  console.log('   ‚úÖ All appointment types (consultation, follow_up, procedure, checkup, emergency, vaccination)')
  console.log('   ‚úÖ All appointment statuses (pending, requested, scheduled, confirmed, arrived, in_progress, completed, cancelled, no_show, rescheduled)')
  console.log('   ‚úÖ Past, present, and future appointments')
  console.log('   ‚úÖ Different time slots (08:00-18:30, 30-minute intervals)')
  console.log('   ‚úÖ Priority appointments (15%)')
  console.log('   ‚úÖ Recurring appointments (8%)')
  console.log('   ‚úÖ Emergency appointments')
  console.log('   ‚úÖ Multiple appointments per time slot')
  console.log('   ‚úÖ Appointments across different departments')
  console.log('   ‚úÖ Diverse patient demographics (200 patients)')
  console.log('   ‚úÖ High volume of today\'s appointments for calendar testing')
}

async function main() {
  console.log('üöÄ Starting test data insertion...')
  console.log('=====================================\n')
  
  try {
    // Step 1: Insert patients
    const patientIds = await insertPatients()
    
    // Step 2: Get doctors
    const doctors = await getDoctors()
    
    if (doctors.length === 0) {
      console.error('‚ùå No doctors found! Please create doctor users first.')
      return
    }
    
    // Step 3: Insert appointments
    const appointmentCount = await insertAppointments(patientIds, doctors)
    
    // Step 4: Generate statistics
    await generateTestStatistics(patientIds, appointmentCount)
    
    console.log('\nüéâ Test data insertion completed successfully!')
    console.log('üîó You can now test both calendar views at:')
    console.log('   üìÖ Role-based Calendar (Time Slots): Switch to "Time Slots View"')
    console.log('   üóìÔ∏è Proper Calendar (Traditional): Switch to "Traditional Calendar"')
    console.log('\nüß™ Test cases to verify:')
    console.log('   ‚úì All appointment types showing with correct colors')
    console.log('   ‚úì All appointment statuses displayed properly')
    console.log('   ‚úì Multiple appointments in same time slot')
    console.log('   ‚úì Different calendar views (month, week, day)')
    console.log('   ‚úì Role-based filtering works correctly')
    console.log('   ‚úì Priority appointments highlighted')
    console.log('   ‚úì Appointment details show type and department')
    
  } catch (error) {
    console.error('üí• Failed to insert test data:', error)
    process.exit(1)
  }
}

main()